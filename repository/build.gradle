plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
def mapstructVersion = "1.3.1.Final"

dependencies {

    compile project(":data")


    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.2'

    compile 'com.github.ben-manes.caffeine:caffeine:2.8.5'

    // Optional extensions
    compile 'com.github.ben-manes.caffeine:guava:2.8.5'

    // https://mvnrepository.com/artifact/io.vavr/vavr
    compile group: 'io.vavr', name: 'vavr', version: '0.10.3'

    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
    compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.4.0'

    // https://mvnrepository.com/artifact/com.aerospike/aerospike-client
    compile group: 'com.aerospike', name: 'aerospike-client', version: '4.2.3'


    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.10.6'

    compile "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // If you are using mapstruct in test code
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'

// https://mvnrepository.com/artifact/org.testng/testng
    compile group: 'org.testng', name: 'testng', version: '7.3.0'


}

test {
    useTestNG()
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // Fail the 'test' task on the first test failure
    failFast = true

    maxParallelForks = 1
    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
